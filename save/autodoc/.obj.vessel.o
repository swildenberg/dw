#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_max_volume":({({"int",}),({}),(["main":({"This method returns the current maxium volume associated with thiscontainer.",}),"return":({"the current maximum volume ",}),]),}),"query_volume":({({"int",}),({}),(["main":({"This method returns the current amount of liquid in the container.",}),"return":({"the current amount of liquid in the container ",}),]),}),"remove_volume":({({"int",}),({({"int",}),"vol_lost",}),(["main":({"This method removes some volume of liquid from the container.",}),"see":({"add_volume()","query_volume() ",}),"param":({"vol_lost the amount of volume removed",}),]),}),"set_max_volume":({({"void",}),({({"int",}),"v",}),(["main":({"This method sets the maximum volume of the container.",}),"see":({"add_volume()","query_max_volume() ",}),"param":({"v the new maximum volume",}),]),}),"set_leak_rate":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the leak rate of the container.  The leak rate is howfast stuff leaks out of the container.",}),"see":({"query_leak_rate() ",}),"param":({"i the new leak rate of the container",}),]),}),"query_volume_left":({({"int",}),({}),(["main":({"This method returns the amount of volume left for liquids to beadded into.",}),"see":({"add_volume()","transfer_liquid_to() ",}),"return":({"the amount of volume left",}),]),}),"calc_liquid":({({"void",}),({}),([]),}),"xfer_volume":({({"int",}),({({"int",}),"vol_xferred",({"object",}),"dest",}),(["main":({"This method transfers a given amount of a liquid to a new container.",}),"param":({"dest the destination of the liquid","vol_xferred the amount of volume transfered ",}),]),}),"stats":({({"mixed",}),({}),(["ingore":({"yes ",}),]),}),"query_liquid_desc":({({"string",}),({}),(["main":({"This method returns the description of the liquid inside the vessel.",}),"return":({"the current liquids description ",}),]),}),"query_leak_rate":({({"int",}),({}),(["main":({"This method returns the leak rate of the container",}),"see":({"set_leak_rate()",}),"return":({"the current leak rate ",}),]),}),"is_fighting_bottle_smashed":({({"int",}),({({"object",}),"player",({"object",}),"me",}),(["main":({"This method checks to see if the person doing the drinking can hold ontotheir bottle without loosing it while in combat.  Warning!  This codemay be used in other objects to deal with handling drinking while incombat.",}),"param":({"player the player doing the drinking","me the object being drunk ",}),"return":({"1 if the bottle is stopped, 0 if it is not",}),]),}),"query_cont_volume":({({"int",}),({}),([]),}),"add_volume":({({"int",}),({({"int",}),"vol",}),(["main":({"This method returns the amount of volume left for liquids to beadded into.",}),"see":({"add_volume() ",}),"param":({"vol the amount of volume added",}),"return":({"1 if the addition was successful, 0 if not",}),]),}),"query_vessel":({({"int",}),({}),([]),}),"query_fullness_desc":({({"string",}),({}),(["main":({"This method returns the fullness description of the vessel.",}),"return":({"the fullness description of the vessel ",}),]),}),"cmp_amount_r":({({"int",}),({({"object",}),"a",({"object",}),"b",}),([]),}),"drink_amount":({({"int",}),({({"int",}),"drinking",({"object",}),"player",}),(["main":({"This method drinks a certain amount of the liquid in the container.It will do all the fudging for being in combat and drinking toomuch, as well as dropping the bottle and so on.",}),"param":({"drinking the amount to drink ",}),]),}),"query_liquid":({({"int",}),({}),(["main":({"This method returns if this vessel is currenly a liquid.  This meansit has a liquid inside it.",}),"see":({"calc_liquid()",}),"return":({"1 if it is a liquid, 0 if not ",}),]),}),"fullness_adjectives":({({"string","*",}),({}),(["main":({"This returns an adjective for how full the current object is withliquid.  This is used in the parse command handling code.",}),"see":({"query_max_volume() ",}),"return":({"the fullness adjective",}),]),}),"cmp_weight_r":({({"int",}),({({"object",}),"a",({"object",}),"b",}),([]),}),])
protected_functions ([])
inherits (["/obj/baggage":({}),])
main_docs (["main":({"This is a container specifically for holding liquids.  The hope isto reduce the memory requirements by taking all of the liquid stuffout of /obj/container, since most of the containers are sacks andchests.  Also, the reaction handler will replace the potion space.<p>Some additional notes:<ol>   <li>As is (hopefully) documented elsewhere, the base units of       volume for most continuous media are drops and pinches, both of       which are roughly 1/4 of a cc.  This means that water has       200 drops per weight unit (1g/cc).  Non-continuous objects       are assumed to be the same density as water.</ol>",}),"@author":({"Jeremy",}),])
define_docs (["TASTE_AMT":([]),"REACTION_HANDLER":([]),])
includes (["/include/volumes.h":1485386656,"/include/tasks.h":1485386656,"/include/move_failures.h":1485386656,])
class_docs ([])
file_name "/obj/vessel.c"
last_changed 1485386656
